/* tslint:disable */
/* eslint-disable */
/**
 * Storage node API
 * Storage node API
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: info@joystream.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    message: string;
}
/**
 * 
 * @export
 * @interface InlineResponse201
 */
export interface InlineResponse201 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse201
     */
    id?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2011
 */
export interface InlineResponse2011 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2011
     */
    token?: string;
}
/**
 * 
 * @export
 * @interface TokenRequest
 */
export interface TokenRequest {
    /**
     * 
     * @type {TokenRequestData}
     * @memberof TokenRequest
     */
    data: TokenRequestData;
    /**
     * 
     * @type {string}
     * @memberof TokenRequest
     */
    signature: string;
}
/**
 * 
 * @export
 * @interface TokenRequestData
 */
export interface TokenRequestData {
    /**
     * 
     * @type {number}
     * @memberof TokenRequestData
     */
    memberId: number;
    /**
     * 
     * @type {string}
     * @memberof TokenRequestData
     */
    accountId: string;
    /**
     * 
     * @type {number}
     * @memberof TokenRequestData
     */
    dataObjectId: number;
    /**
     * 
     * @type {number}
     * @memberof TokenRequestData
     */
    storageBucketId: number;
    /**
     * 
     * @type {string}
     * @memberof TokenRequestData
     */
    bagId: string;
}

/**
 * PublicApi - axios parameter creator
 * @export
 */
export const PublicApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get auth token from a server.
         * @param {TokenRequest} [tokenRequest] Token request parameters,
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicApiAuthTokenForUploading: async (tokenRequest?: TokenRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/authToken`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tokenRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a media file.
         * @param {string} cid Content ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicApiGetFile: async (cid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('publicApiGetFile', 'cid', cid)
            const localVarPath = `/files/{cid}`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a media file headers.
         * @param {string} cid Content ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicApiGetFileHeaders: async (cid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('publicApiGetFileHeaders', 'cid', cid)
            const localVarPath = `/files/{cid}`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'HEAD', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Upload data
         * @param {string} dataObjectId Data object runtime ID
         * @param {string} storageBucketId Storage bucket ID
         * @param {string} bagId Bag ID
         * @param {any} [file] Data file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicApiUploadFile: async (dataObjectId: string, storageBucketId: string, bagId: string, file?: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataObjectId' is not null or undefined
            assertParamExists('publicApiUploadFile', 'dataObjectId', dataObjectId)
            // verify required parameter 'storageBucketId' is not null or undefined
            assertParamExists('publicApiUploadFile', 'storageBucketId', storageBucketId)
            // verify required parameter 'bagId' is not null or undefined
            assertParamExists('publicApiUploadFile', 'bagId', bagId)
            const localVarPath = `/files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication UploadAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (dataObjectId !== undefined) { 
                localVarFormParams.append('dataObjectId', dataObjectId as any);
            }
    
            if (storageBucketId !== undefined) { 
                localVarFormParams.append('storageBucketId', storageBucketId as any);
            }
    
            if (bagId !== undefined) { 
                localVarFormParams.append('bagId', bagId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PublicApi - functional programming interface
 * @export
 */
export const PublicApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PublicApiAxiosParamCreator(configuration)
    return {
        /**
         * Get auth token from a server.
         * @param {TokenRequest} [tokenRequest] Token request parameters,
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publicApiAuthTokenForUploading(tokenRequest?: TokenRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2011>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publicApiAuthTokenForUploading(tokenRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a media file.
         * @param {string} cid Content ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publicApiGetFile(cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publicApiGetFile(cid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a media file headers.
         * @param {string} cid Content ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publicApiGetFileHeaders(cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publicApiGetFileHeaders(cid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Upload data
         * @param {string} dataObjectId Data object runtime ID
         * @param {string} storageBucketId Storage bucket ID
         * @param {string} bagId Bag ID
         * @param {any} [file] Data file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publicApiUploadFile(dataObjectId: string, storageBucketId: string, bagId: string, file?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse201>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publicApiUploadFile(dataObjectId, storageBucketId, bagId, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PublicApi - factory interface
 * @export
 */
export const PublicApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PublicApiFp(configuration)
    return {
        /**
         * Get auth token from a server.
         * @param {TokenRequest} [tokenRequest] Token request parameters,
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicApiAuthTokenForUploading(tokenRequest?: TokenRequest, options?: any): AxiosPromise<InlineResponse2011> {
            return localVarFp.publicApiAuthTokenForUploading(tokenRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a media file.
         * @param {string} cid Content ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicApiGetFile(cid: string, options?: any): AxiosPromise<any> {
            return localVarFp.publicApiGetFile(cid, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a media file headers.
         * @param {string} cid Content ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicApiGetFileHeaders(cid: string, options?: any): AxiosPromise<void> {
            return localVarFp.publicApiGetFileHeaders(cid, options).then((request) => request(axios, basePath));
        },
        /**
         * Upload data
         * @param {string} dataObjectId Data object runtime ID
         * @param {string} storageBucketId Storage bucket ID
         * @param {string} bagId Bag ID
         * @param {any} [file] Data file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicApiUploadFile(dataObjectId: string, storageBucketId: string, bagId: string, file?: any, options?: any): AxiosPromise<InlineResponse201> {
            return localVarFp.publicApiUploadFile(dataObjectId, storageBucketId, bagId, file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PublicApi - object-oriented interface
 * @export
 * @class PublicApi
 * @extends {BaseAPI}
 */
export class PublicApi extends BaseAPI {
    /**
     * Get auth token from a server.
     * @param {TokenRequest} [tokenRequest] Token request parameters,
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public publicApiAuthTokenForUploading(tokenRequest?: TokenRequest, options?: any) {
        return PublicApiFp(this.configuration).publicApiAuthTokenForUploading(tokenRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a media file.
     * @param {string} cid Content ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public publicApiGetFile(cid: string, options?: any) {
        return PublicApiFp(this.configuration).publicApiGetFile(cid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a media file headers.
     * @param {string} cid Content ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public publicApiGetFileHeaders(cid: string, options?: any) {
        return PublicApiFp(this.configuration).publicApiGetFileHeaders(cid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Upload data
     * @param {string} dataObjectId Data object runtime ID
     * @param {string} storageBucketId Storage bucket ID
     * @param {string} bagId Bag ID
     * @param {any} [file] Data file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public publicApiUploadFile(dataObjectId: string, storageBucketId: string, bagId: string, file?: any, options?: any) {
        return PublicApiFp(this.configuration).publicApiUploadFile(dataObjectId, storageBucketId, bagId, file, options).then((request) => request(this.axios, this.basePath));
    }
}


