// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for proposals_engine
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-09-13, STEPS: `10`, REPEAT: 5, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./scripts/../target/release/joystream-node
// benchmark
// pallet
// --pallet=proposals_engine
// --extrinsic=*
// --chain=dev
// --steps=10
// --repeat=5
// --execution=wasm
// --template=./scripts/../devops/joystream-pallet-weight-template.hbs
// --output=.

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(unused_variables)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions needed for proposals_engine.
pub trait WeightInfo {
	fn vote(_i: u32, ) -> Weight;
	fn cancel_proposal() -> Weight;
	fn veto_proposal() -> Weight;
	fn proposer_remark() -> Weight;
	fn on_initialize_immediate_execution_decode_fails(_i: u32, ) -> Weight;
	fn on_initialize_pending_execution_decode_fails(_i: u32, ) -> Weight;
	fn on_initialize_approved_pending_constitutionality(_i: u32, ) -> Weight;
	fn on_initialize_rejected(_i: u32, ) -> Weight;
	fn on_initialize_slashed(_i: u32, ) -> Weight;
	fn cancel_active_and_pending_proposals(_i: u32, ) -> Weight;
}

/// Weights for proposals_engine using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: Council CouncilMembers (r:1 w:0)
	// Storage: ProposalEngine Proposals (r:1 w:1)
	// Storage: ProposalEngine VoteExistsByProposalByVoter (r:1 w:1)
	fn vote(i: u32, ) -> Weight {
		(57_107_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(i as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: ProposalEngine Proposals (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ProposalEngine ActiveProposalCount (r:1 w:1)
	// Storage: ProposalsCodex ThreadIdByProposalId (r:0 w:1)
	// Storage: ProposalDiscussion ThreadById (r:0 w:1)
	// Storage: ProposalEngine DispatchableCallCode (r:0 w:1)
	fn cancel_proposal() -> Weight {
		(102_968_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	// Storage: ProposalEngine Proposals (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ProposalEngine ActiveProposalCount (r:1 w:1)
	// Storage: ProposalsCodex ThreadIdByProposalId (r:0 w:1)
	// Storage: ProposalDiscussion ThreadById (r:0 w:1)
	// Storage: ProposalEngine DispatchableCallCode (r:0 w:1)
	fn veto_proposal() -> Weight {
		(58_013_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: ProposalEngine Proposals (r:1 w:0)
	fn proposer_remark() -> Weight {
		(28_982_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
	}
	// Storage: ProposalEngine Proposals (r:2 w:1)
	// Storage: Council CouncilMembers (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ProposalEngine DispatchableCallCode (r:1 w:1)
	// Storage: ProposalEngine ActiveProposalCount (r:1 w:1)
	// Storage: ProposalsCodex ThreadIdByProposalId (r:0 w:1)
	// Storage: ProposalDiscussion ThreadById (r:0 w:1)
	// Storage: ProposalEngine VoteExistsByProposalByVoter (r:0 w:1)
	fn on_initialize_immediate_execution_decode_fails(i: u32, ) -> Weight {
		(46_335_000 as Weight)
			// Standard Error: 358_000
			.saturating_add((62_738_000 as Weight).saturating_mul(i as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().reads((4 as Weight).saturating_mul(i as Weight)))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
			.saturating_add(T::DbWeight::get().writes((6 as Weight).saturating_mul(i as Weight)))
	}
	// Storage: ProposalEngine Proposals (r:2 w:1)
	// Storage: ProposalEngine DispatchableCallCode (r:1 w:1)
	// Storage: ProposalEngine ActiveProposalCount (r:1 w:1)
	// Storage: ProposalsCodex ThreadIdByProposalId (r:0 w:1)
	// Storage: ProposalDiscussion ThreadById (r:0 w:1)
	// Storage: ProposalEngine VoteExistsByProposalByVoter (r:0 w:1)
	fn on_initialize_pending_execution_decode_fails(i: u32, ) -> Weight {
		(34_365_000 as Weight)
			// Standard Error: 211_000
			.saturating_add((32_454_000 as Weight).saturating_mul(i as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(i as Weight)))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
			.saturating_add(T::DbWeight::get().writes((4 as Weight).saturating_mul(i as Weight)))
	}
	// Storage: ProposalEngine Proposals (r:2 w:1)
	// Storage: Council CouncilMembers (r:1 w:0)
	fn on_initialize_approved_pending_constitutionality(i: u32, ) -> Weight {
		(40_519_000 as Weight)
			// Standard Error: 271_000
			.saturating_add((21_516_000 as Weight).saturating_mul(i as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(i as Weight)))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(i as Weight)))
	}
	// Storage: ProposalEngine Proposals (r:2 w:1)
	// Storage: Council CouncilMembers (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ProposalEngine ActiveProposalCount (r:1 w:1)
	// Storage: ProposalsCodex ThreadIdByProposalId (r:0 w:1)
	// Storage: ProposalDiscussion ThreadById (r:0 w:1)
	// Storage: ProposalEngine VoteExistsByProposalByVoter (r:0 w:5)
	// Storage: ProposalEngine DispatchableCallCode (r:0 w:1)
	fn on_initialize_rejected(i: u32, ) -> Weight {
		(45_582_000 as Weight)
			// Standard Error: 436_000
			.saturating_add((85_140_000 as Weight).saturating_mul(i as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().reads((3 as Weight).saturating_mul(i as Weight)))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
			.saturating_add(T::DbWeight::get().writes((10 as Weight).saturating_mul(i as Weight)))
	}
	// Storage: ProposalEngine Proposals (r:2 w:1)
	// Storage: Council CouncilMembers (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ProposalEngine ActiveProposalCount (r:1 w:1)
	// Storage: ProposalsCodex ThreadIdByProposalId (r:0 w:1)
	// Storage: ProposalDiscussion ThreadById (r:0 w:1)
	// Storage: ProposalEngine VoteExistsByProposalByVoter (r:0 w:5)
	// Storage: ProposalEngine DispatchableCallCode (r:0 w:1)
	fn on_initialize_slashed(i: u32, ) -> Weight {
		(29_946_000 as Weight)
			// Standard Error: 510_000
			.saturating_add((79_280_000 as Weight).saturating_mul(i as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().reads((3 as Weight).saturating_mul(i as Weight)))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
			.saturating_add(T::DbWeight::get().writes((10 as Weight).saturating_mul(i as Weight)))
	}
	// Storage: ProposalEngine ActiveProposalCount (r:1 w:1)
	// Storage: ProposalEngine Proposals (r:2 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ProposalsCodex ThreadIdByProposalId (r:0 w:1)
	// Storage: ProposalDiscussion ThreadById (r:0 w:1)
	// Storage: ProposalEngine VoteExistsByProposalByVoter (r:0 w:5)
	// Storage: ProposalEngine DispatchableCallCode (r:0 w:1)
	fn cancel_active_and_pending_proposals(i: u32, ) -> Weight {
		(29_543_000 as Weight)
			// Standard Error: 278_000
			.saturating_add((52_267_000 as Weight).saturating_mul(i as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().reads((3 as Weight).saturating_mul(i as Weight)))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
			.saturating_add(T::DbWeight::get().writes((10 as Weight).saturating_mul(i as Weight)))
	}
}

// Default implementation for tests
impl WeightInfo for () {
	fn vote(i: u32, ) -> Weight {
		0
	}
	fn cancel_proposal() -> Weight {
		0
	}
	fn veto_proposal() -> Weight {
		0
	}
	fn proposer_remark() -> Weight {
		0
	}
	fn on_initialize_immediate_execution_decode_fails(i: u32, ) -> Weight {
		0
	}
	fn on_initialize_pending_execution_decode_fails(i: u32, ) -> Weight {
		0
	}
	fn on_initialize_approved_pending_constitutionality(i: u32, ) -> Weight {
		0
	}
	fn on_initialize_rejected(i: u32, ) -> Weight {
		0
	}
	fn on_initialize_slashed(i: u32, ) -> Weight {
		0
	}
	fn cancel_active_and_pending_proposals(i: u32, ) -> Weight {
		0
	}
}
