// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for membership
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-13, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("prod-test"), DB CACHE: 1024

// Executed Command:
// ./../target/release/joystream-node
// benchmark
// pallet
// --pallet=membership
// --extrinsic=*
// --chain=prod-test
// --steps=50
// --repeat=20
// --execution=wasm
// --template=./../devops/joystream-pallet-weight-template.hbs
// --output=./../runtime-modules/membership/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(unused_variables)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions needed for membership.
pub trait WeightInfo {
	fn buy_membership_without_referrer(_i: u32, _j: u32, ) -> Weight;
	fn buy_membership_with_referrer(_i: u32, _j: u32, ) -> Weight;
	fn update_profile(_i: u32, _j: u32, ) -> Weight;
	fn update_accounts_none() -> Weight;
	fn update_accounts_root() -> Weight;
	fn update_accounts_controller() -> Weight;
	fn update_accounts_both() -> Weight;
	fn set_referral_cut() -> Weight;
	fn transfer_invites() -> Weight;
	fn invite_member(_i: u32, _j: u32, ) -> Weight;
	fn gift_membership(_i: u32, _j: u32, ) -> Weight;
	fn set_membership_price() -> Weight;
	fn update_profile_verification() -> Weight;
	fn set_leader_invitation_quota() -> Weight;
	fn set_initial_invitation_balance() -> Weight;
	fn set_initial_invitation_count() -> Weight;
	fn add_staking_account_candidate() -> Weight;
	fn confirm_staking_account() -> Weight;
	fn remove_staking_account() -> Weight;
	fn member_remark_without_payment() -> Weight;
	fn member_remark_with_payment() -> Weight;
	fn create_member(_i: u32, _j: u32, ) -> Weight;
}

/// Weights for membership using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Membership MembershipPrice (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Membership MemberIdByHandleHash (r:1 w:1)
	// Storage: Membership InitialInvitationCount (r:1 w:0)
	// Storage: Membership NextMemberId (r:1 w:1)
	// Storage: Membership MembershipById (r:0 w:1)
	fn buy_membership_without_referrer(i: u32, j: u32, ) -> Weight {
		(81_922_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((1_861_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 6_000
			.saturating_add((550_000 as Weight).saturating_mul(j as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: Membership MembershipPrice (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Membership MemberIdByHandleHash (r:1 w:1)
	// Storage: Membership MembershipById (r:1 w:1)
	// Storage: Membership InitialInvitationCount (r:1 w:0)
	// Storage: Membership NextMemberId (r:1 w:1)
	// Storage: Membership ReferralCut (r:1 w:0)
	fn buy_membership_with_referrer(i: u32, j: u32, ) -> Weight {
		(114_472_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((1_887_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 10_000
			.saturating_add((577_000 as Weight).saturating_mul(j as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: Membership MembershipById (r:1 w:1)
	// Storage: Membership MemberIdByHandleHash (r:1 w:2)
	fn update_profile(i: u32, j: u32, ) -> Weight {
		(42_997_000 as Weight)
			// Standard Error: 8_000
			.saturating_add((2_037_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 8_000
			.saturating_add((592_000 as Weight).saturating_mul(j as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn update_accounts_none() -> Weight {
		(1_000_000 as Weight)
	}
	// Storage: Membership MembershipById (r:1 w:1)
	fn update_accounts_root() -> Weight {
		(29_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Membership MembershipById (r:1 w:1)
	fn update_accounts_controller() -> Weight {
		(30_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Membership MembershipById (r:1 w:1)
	fn update_accounts_both() -> Weight {
		(30_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Membership ReferralCut (r:0 w:1)
	fn set_referral_cut() -> Weight {
		(21_000_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Membership MembershipById (r:2 w:2)
	fn transfer_invites() -> Weight {
		(41_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Membership MembershipById (r:1 w:2)
	// Storage: Membership MemberIdByHandleHash (r:1 w:1)
	// Storage: Instance6WorkingGroup Budget (r:1 w:1)
	// Storage: Membership InitialInvitationBalance (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: Membership NextMemberId (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn invite_member(i: u32, j: u32, ) -> Weight {
		(98_227_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((1_910_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 7_000
			.saturating_add((682_000 as Weight).saturating_mul(j as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	// Storage: Membership MemberIdByHandleHash (r:1 w:1)
	// Storage: Membership MembershipPrice (r:1 w:0)
	// Storage: System Account (r:3 w:3)
	// Storage: Balances Locks (r:2 w:2)
	// Storage: Membership NextMemberId (r:1 w:1)
	// Storage: Membership MembershipById (r:0 w:1)
	fn gift_membership(i: u32, j: u32, ) -> Weight {
		(202_321_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((1_914_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 13_000
			.saturating_add((699_000 as Weight).saturating_mul(j as Weight))
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	// Storage: Membership MembershipPrice (r:0 w:1)
	fn set_membership_price() -> Weight {
		(21_000_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Instance6WorkingGroup WorkerById (r:1 w:0)
	// Storage: Membership MembershipById (r:1 w:1)
	fn update_profile_verification() -> Weight {
		(40_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Instance6WorkingGroup CurrentLead (r:1 w:0)
	// Storage: Instance6WorkingGroup WorkerById (r:1 w:0)
	// Storage: Membership MembershipById (r:1 w:1)
	fn set_leader_invitation_quota() -> Weight {
		(42_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Membership InitialInvitationBalance (r:0 w:1)
	fn set_initial_invitation_balance() -> Weight {
		(20_000_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Membership InitialInvitationCount (r:0 w:1)
	fn set_initial_invitation_count() -> Weight {
		(20_000_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Membership StakingAccountIdMemberStatus (r:1 w:1)
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn add_staking_account_candidate() -> Weight {
		(65_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: Membership StakingAccountIdMemberStatus (r:1 w:1)
	fn confirm_staking_account() -> Weight {
		(43_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: Membership StakingAccountIdMemberStatus (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn remove_staking_account() -> Weight {
		(62_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	fn member_remark_without_payment() -> Weight {
		(27_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	fn member_remark_with_payment() -> Weight {
		(83_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Membership MemberIdByHandleHash (r:1 w:1)
	// Storage: Membership InitialInvitationCount (r:1 w:0)
	// Storage: Membership NextMemberId (r:1 w:1)
	// Storage: Membership MembershipById (r:0 w:1)
	fn create_member(i: u32, j: u32, ) -> Weight {
		(42_444_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((2_106_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 6_000
			.saturating_add((608_000 as Weight).saturating_mul(j as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
}

// Default implementation for tests
impl WeightInfo for () {
	fn buy_membership_without_referrer(i: u32, j: u32, ) -> Weight {
		0
	}
	fn buy_membership_with_referrer(i: u32, j: u32, ) -> Weight {
		0
	}
	fn update_profile(i: u32, j: u32, ) -> Weight {
		0
	}
	fn update_accounts_none() -> Weight {
		0
	}
	fn update_accounts_root() -> Weight {
		0
	}
	fn update_accounts_controller() -> Weight {
		0
	}
	fn update_accounts_both() -> Weight {
		0
	}
	fn set_referral_cut() -> Weight {
		0
	}
	fn transfer_invites() -> Weight {
		0
	}
	fn invite_member(i: u32, j: u32, ) -> Weight {
		0
	}
	fn gift_membership(i: u32, j: u32, ) -> Weight {
		0
	}
	fn set_membership_price() -> Weight {
		0
	}
	fn update_profile_verification() -> Weight {
		0
	}
	fn set_leader_invitation_quota() -> Weight {
		0
	}
	fn set_initial_invitation_balance() -> Weight {
		0
	}
	fn set_initial_invitation_count() -> Weight {
		0
	}
	fn add_staking_account_candidate() -> Weight {
		0
	}
	fn confirm_staking_account() -> Weight {
		0
	}
	fn remove_staking_account() -> Weight {
		0
	}
	fn member_remark_without_payment() -> Weight {
		0
	}
	fn member_remark_with_payment() -> Weight {
		0
	}
	fn create_member(i: u32, j: u32, ) -> Weight {
		0
	}
}
