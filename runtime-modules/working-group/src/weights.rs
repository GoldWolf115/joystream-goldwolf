// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for working_group
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-09-21, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./../target/release/joystream-node
// benchmark
// pallet
// --pallet=working_group
// --extrinsic=*
// --chain=dev
// --steps=50
// --repeat=20
// --execution=wasm
// --template=./../devops/joystream-pallet-weight-template.hbs
// --output=./../runtime-modules/working-group/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(unused_variables)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions needed for working_group.
pub trait WeightInfo {
	fn on_initialize_leaving(_i: u32, ) -> Weight;
	fn on_initialize_rewarding_with_missing_reward(_i: u32, ) -> Weight;
	fn on_initialize_rewarding_with_missing_reward_cant_pay(_i: u32, ) -> Weight;
	fn on_initialize_rewarding_without_missing_reward(_i: u32, ) -> Weight;
	fn apply_on_opening(_i: u32, ) -> Weight;
	fn fill_opening_lead() -> Weight;
	fn fill_opening_worker(_i: u32, ) -> Weight;
	fn update_role_account() -> Weight;
	fn cancel_opening() -> Weight;
	fn withdraw_application() -> Weight;
	fn slash_stake(_i: u32, ) -> Weight;
	fn terminate_role_worker(_i: u32, ) -> Weight;
	fn terminate_role_lead(_i: u32, ) -> Weight;
	fn increase_stake() -> Weight;
	fn decrease_stake() -> Weight;
	fn spend_from_budget() -> Weight;
	fn fund_working_group_budget() -> Weight;
	fn update_reward_amount() -> Weight;
	fn set_status_text(_i: u32, ) -> Weight;
	fn update_reward_account() -> Weight;
	fn set_budget() -> Weight;
	fn add_opening(_i: u32, ) -> Weight;
	fn leave_role(_i: u32, ) -> Weight;
	fn lead_remark() -> Weight;
	fn worker_remark() -> Weight;
}

/// Weights for working_group using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Instance3WorkingGroup WorkerById (r:3 w:2)
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:1)
	// Storage: Instance3WorkingGroup Budget (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: Instance3WorkingGroup ActiveWorkerCount (r:1 w:1)
	// Storage: Balances Locks (r:2 w:2)
	fn on_initialize_leaving(i: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 26_000
			.saturating_add((55_910_000 as Weight).saturating_mul(i as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((3 as Weight).saturating_mul(i as Weight)))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
			.saturating_add(T::DbWeight::get().writes((3 as Weight).saturating_mul(i as Weight)))
	}
	// Storage: Instance3WorkingGroup WorkerById (r:3 w:2)
	// Storage: Instance3WorkingGroup Budget (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	fn on_initialize_rewarding_with_missing_reward(i: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 19_000
			.saturating_add((52_418_000 as Weight).saturating_mul(i as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(i as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(i as Weight)))
	}
	// Storage: Instance3WorkingGroup WorkerById (r:3 w:2)
	// Storage: Instance3WorkingGroup Budget (r:1 w:0)
	fn on_initialize_rewarding_with_missing_reward_cant_pay(i: u32, ) -> Weight {
		(6_376_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((23_190_000 as Weight).saturating_mul(i as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(i as Weight)))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(i as Weight)))
	}
	// Storage: Instance3WorkingGroup WorkerById (r:3 w:1)
	// Storage: Instance3WorkingGroup Budget (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	fn on_initialize_rewarding_without_missing_reward(i: u32, ) -> Weight {
		(23_656_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((32_944_000 as Weight).saturating_mul(i as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(i as Weight)))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(i as Weight)))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: Instance3WorkingGroup OpeningById (r:1 w:0)
	// Storage: Membership StakingAccountIdMemberStatus (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Instance3WorkingGroup NextApplicationId (r:1 w:1)
	// Storage: Instance3WorkingGroup ApplicationById (r:0 w:1)
	fn apply_on_opening(i: u32, ) -> Weight {
		(59_958_000 as Weight)
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(i as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: Instance3WorkingGroup OpeningById (r:1 w:1)
	// Storage: Instance3WorkingGroup ActiveWorkerCount (r:1 w:1)
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:1)
	// Storage: Instance3WorkingGroup ApplicationById (r:1 w:1)
	// Storage: Instance3WorkingGroup NextWorkerId (r:1 w:1)
	// Storage: Instance3WorkingGroup WorkerById (r:0 w:1)
	fn fill_opening_lead() -> Weight {
		(48_410_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	// Storage: Instance3WorkingGroup OpeningById (r:1 w:1)
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:1)
	// Storage: Instance3WorkingGroup ActiveWorkerCount (r:1 w:1)
	// Storage: Instance3WorkingGroup ApplicationById (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Instance3WorkingGroup NextWorkerId (r:1 w:1)
	fn fill_opening_worker(i: u32, ) -> Weight {
		(48_435_000 as Weight)
			// Standard Error: 7_000
			.saturating_add((15_423_000 as Weight).saturating_mul(i as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(i as Weight)))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
			.saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(i as Weight)))
	}
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:1)
	// Storage: Membership MembershipById (r:1 w:0)
	fn update_role_account() -> Weight {
		(27_912_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Instance3WorkingGroup OpeningById (r:1 w:1)
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn cancel_opening() -> Weight {
		(57_710_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Instance3WorkingGroup ApplicationById (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn withdraw_application() -> Weight {
		(36_613_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:2 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn slash_stake(i: u32, ) -> Weight {
		(77_507_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(i as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:2 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Instance3WorkingGroup Budget (r:1 w:1)
	// Storage: Instance3WorkingGroup ActiveWorkerCount (r:1 w:1)
	fn terminate_role_worker(i: u32, ) -> Weight {
		(120_858_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(i as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:1)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Instance3WorkingGroup Budget (r:1 w:1)
	// Storage: Instance3WorkingGroup ActiveWorkerCount (r:1 w:1)
	fn terminate_role_lead(i: u32, ) -> Weight {
		(118_495_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(i as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	fn increase_stake() -> Weight {
		(48_536_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:2 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn decrease_stake() -> Weight {
		(56_717_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Instance3WorkingGroup Budget (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn spend_from_budget() -> Weight {
		(41_119_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Instance3WorkingGroup Budget (r:1 w:1)
	fn fund_working_group_budget() -> Weight {
		(40_547_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:2 w:1)
	fn update_reward_amount() -> Weight {
		(34_329_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Instance3WorkingGroup StatusTextHash (r:0 w:1)
	fn set_status_text(i: u32, ) -> Weight {
		(27_079_000 as Weight)
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(i as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:1)
	fn update_reward_account() -> Weight {
		(24_184_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Instance3WorkingGroup Budget (r:0 w:1)
	fn set_budget() -> Weight {
		(13_421_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Instance3WorkingGroup NextOpeningId (r:1 w:1)
	// Storage: Instance3WorkingGroup OpeningById (r:0 w:1)
	fn add_opening(i: u32, ) -> Weight {
		(70_100_000 as Weight)
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(i as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:1)
	fn leave_role(i: u32, ) -> Weight {
		(26_049_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(i as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	fn lead_remark() -> Weight {
		(24_240_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
	}
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	fn worker_remark() -> Weight {
		(23_447_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
}

// Default implementation for tests
impl WeightInfo for () {
	fn on_initialize_leaving(i: u32, ) -> Weight {
		0
	}
	fn on_initialize_rewarding_with_missing_reward(i: u32, ) -> Weight {
		0
	}
	fn on_initialize_rewarding_with_missing_reward_cant_pay(i: u32, ) -> Weight {
		0
	}
	fn on_initialize_rewarding_without_missing_reward(i: u32, ) -> Weight {
		0
	}
	fn apply_on_opening(i: u32, ) -> Weight {
		0
	}
	fn fill_opening_lead() -> Weight {
		0
	}
	fn fill_opening_worker(i: u32, ) -> Weight {
		0
	}
	fn update_role_account() -> Weight {
		0
	}
	fn cancel_opening() -> Weight {
		0
	}
	fn withdraw_application() -> Weight {
		0
	}
	fn slash_stake(i: u32, ) -> Weight {
		0
	}
	fn terminate_role_worker(i: u32, ) -> Weight {
		0
	}
	fn terminate_role_lead(i: u32, ) -> Weight {
		0
	}
	fn increase_stake() -> Weight {
		0
	}
	fn decrease_stake() -> Weight {
		0
	}
	fn spend_from_budget() -> Weight {
		0
	}
	fn fund_working_group_budget() -> Weight {
		0
	}
	fn update_reward_amount() -> Weight {
		0
	}
	fn set_status_text(i: u32, ) -> Weight {
		0
	}
	fn update_reward_account() -> Weight {
		0
	}
	fn set_budget() -> Weight {
		0
	}
	fn add_opening(i: u32, ) -> Weight {
		0
	}
	fn leave_role(i: u32, ) -> Weight {
		0
	}
	fn lead_remark() -> Weight {
		0
	}
	fn worker_remark() -> Weight {
		0
	}
}
