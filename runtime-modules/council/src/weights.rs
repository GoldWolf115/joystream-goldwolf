// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for council
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-09-13, STEPS: `10`, REPEAT: 5, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./scripts/../target/release/joystream-node
// benchmark
// pallet
// --pallet=council
// --extrinsic=*
// --chain=dev
// --steps=10
// --repeat=5
// --execution=wasm
// --template=./scripts/../devops/joystream-pallet-weight-template.hbs
// --output=.

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(unused_variables)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions needed for council.
pub trait WeightInfo {
	fn set_budget_increment() -> Weight;
	fn set_councilor_reward() -> Weight;
	fn funding_request(_i: u32, ) -> Weight;
	fn try_process_budget_refill_budget_only() -> Weight;
	fn try_process_budget_payout_council_members_only() -> Weight;
	fn try_progress_stage_idle() -> Weight;
	fn try_progress_stage_announcing_start_election(_i: u32, ) -> Weight;
	fn try_progress_stage_announcing_restart() -> Weight;
	fn announce_candidacy() -> Weight;
	fn release_candidacy_stake() -> Weight;
	fn set_candidacy_note(_i: u32, ) -> Weight;
	fn withdraw_candidacy() -> Weight;
	fn set_budget() -> Weight;
	fn plan_budget_refill() -> Weight;
	fn fund_council_budget() -> Weight;
	fn candidate_remark() -> Weight;
	fn councilor_remark() -> Weight;
}

/// Weights for council using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Council BudgetIncrement (r:0 w:1)
	fn set_budget_increment() -> Weight {
		(15_098_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Council CouncilorReward (r:0 w:1)
	fn set_councilor_reward() -> Weight {
		(15_232_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Council Budget (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn funding_request(i: u32, ) -> Weight {
		(20_306_000 as Weight)
			// Standard Error: 74_000
			.saturating_add((27_854_000 as Weight).saturating_mul(i as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(i as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(i as Weight)))
	}
	// Storage: Council BudgetIncrement (r:1 w:0)
	// Storage: Council Budget (r:1 w:1)
	// Storage: Council NextBudgetRefill (r:0 w:1)
	fn try_process_budget_refill_budget_only() -> Weight {
		(25_415_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Council CouncilorReward (r:1 w:0)
	// Storage: Council Budget (r:1 w:1)
	// Storage: Council CouncilMembers (r:1 w:1)
	// Storage: System Account (r:5 w:5)
	// Storage: Council NextRewardPayments (r:0 w:1)
	fn try_process_budget_payout_council_members_only() -> Weight {
		(121_414_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	// Storage: Council Stage (r:1 w:1)
	// Storage: Council AnnouncementPeriodNr (r:1 w:1)
	fn try_progress_stage_idle() -> Weight {
		(421_799_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Council Stage (r:1 w:1)
	// Storage: Council AnnouncementPeriodNr (r:1 w:0)
	// Storage: Instance1Referendum Stage (r:1 w:1)
	fn try_progress_stage_announcing_start_election(i: u32, ) -> Weight {
		(86_854_000 as Weight)
			// Standard Error: 40_000
			.saturating_add((383_000 as Weight).saturating_mul(i as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Council Stage (r:1 w:1)
	// Storage: Council AnnouncementPeriodNr (r:1 w:1)
	fn try_progress_stage_announcing_restart() -> Weight {
		(85_502_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: Membership StakingAccountIdMemberStatus (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: Council Stage (r:1 w:1)
	// Storage: Council Candidates (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Council AnnouncementPeriodNr (r:1 w:0)
	fn announce_candidacy() -> Weight {
		(60_904_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: Council Candidates (r:1 w:1)
	// Storage: Council AnnouncementPeriodNr (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn release_candidacy_stake() -> Weight {
		(48_445_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: Council Candidates (r:1 w:1)
	// Storage: Council AnnouncementPeriodNr (r:1 w:0)
	// Storage: Council Stage (r:1 w:0)
	fn set_candidacy_note(i: u32, ) -> Weight {
		(37_464_000 as Weight)
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(i as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: Council Candidates (r:1 w:1)
	// Storage: Council Stage (r:1 w:1)
	// Storage: Council AnnouncementPeriodNr (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn withdraw_candidacy() -> Weight {
		(52_692_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: Council Budget (r:0 w:1)
	fn set_budget() -> Weight {
		(15_197_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Council NextBudgetRefill (r:0 w:1)
	fn plan_budget_refill() -> Weight {
		(15_231_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Council Budget (r:1 w:1)
	fn fund_council_budget() -> Weight {
		(46_022_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: Council Candidates (r:1 w:0)
	// Storage: Council AnnouncementPeriodNr (r:1 w:0)
	fn candidate_remark() -> Weight {
		(29_072_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: Council CouncilMembers (r:1 w:0)
	fn councilor_remark() -> Weight {
		(31_614_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
	}
}

// Default implementation for tests
impl WeightInfo for () {
	fn set_budget_increment() -> Weight {
		0
	}
	fn set_councilor_reward() -> Weight {
		0
	}
	fn funding_request(i: u32, ) -> Weight {
		0
	}
	fn try_process_budget_refill_budget_only() -> Weight {
		0
	}
	fn try_process_budget_payout_council_members_only() -> Weight {
		0
	}
	fn try_progress_stage_idle() -> Weight {
		0
	}
	fn try_progress_stage_announcing_start_election(i: u32, ) -> Weight {
		0
	}
	fn try_progress_stage_announcing_restart() -> Weight {
		0
	}
	fn announce_candidacy() -> Weight {
		0
	}
	fn release_candidacy_stake() -> Weight {
		0
	}
	fn set_candidacy_note(i: u32, ) -> Weight {
		0
	}
	fn withdraw_candidacy() -> Weight {
		0
	}
	fn set_budget() -> Weight {
		0
	}
	fn plan_budget_refill() -> Weight {
		0
	}
	fn fund_council_budget() -> Weight {
		0
	}
	fn candidate_remark() -> Weight {
		0
	}
	fn councilor_remark() -> Weight {
		0
	}
}
