type ChannelRewardClaimedEvent implements Event @entity {
  ### GENERIC DATA ###

  "(network}-{blockNumber}-{indexInBlock}."
  id: ID!

  "Hash of the extrinsic which caused the event to be emitted."
  inExtrinsic: String

  "Blocknumber of the block in which the event was emitted."
  inBlock: Int!

  "Network the block was produced in."
  network: Network!

  "Index of event in block from which it was emitted."
  indexInBlock: Int!

  ### SPECIFIC DATA ###

  "The channel that claimed the reward"
  channel: Channel!

  "Reward amount claimed"
  amount: BigInt!
}

type ChannelRewardClaimedAndWithdrawnEvent implements Event @entity {
  ### GENERIC DATA ###

  "(network}-{blockNumber}-{indexInBlock}."
  id: ID!

  "Hash of the extrinsic which caused the event to be emitted."
  inExtrinsic: String

  "Blocknumber of the block in which the event was emitted."
  inBlock: Int!

  "Network the block was produced in."
  network: Network!

  "Index of event in block from which it was emitted."
  indexInBlock: Int!

  ### SPECIFIC DATA ###

  "The channel that claimed the reward"
  channel: Channel!

  "Reward amount claimed"
  amount: BigInt!

  "Destination account ID"
  account: String!

  "Content actor"
  actor: ContentActor!
}

# TODO: not really necessary?

# type ChannelPayoutParametersUpdatedEvent implements Event @entity {
#   ### GENERIC DATA ###

#   "(network}-{blockNumber}-{indexInBlock}."
#   id: ID!

#   "Hash of the extrinsic which caused the event to be emitted."
#   inExtrinsic: String

#   "Blocknumber of the block in which the event was emitted."
#   inBlock: Int!

#   "Network the block was produced in."
#   network: Network!

#   "Index of event in block from which it was emitted."
#   indexInBlock: Int!

#   ### SPECIFIC DATA ###

#   "Merkle root of the channel payouts"
#   commitment: Bytes!
# }

type ChannelPayoutsCommitmentUpdatedEvent implements Event @entity {
  ### GENERIC DATA ###

  "(network}-{blockNumber}-{indexInBlock}."
  id: ID!

  "Hash of the extrinsic which caused the event to be emitted."
  inExtrinsic: String

  "Blocknumber of the block in which the event was emitted."
  inBlock: Int!

  "Network the block was produced in."
  network: Network!

  "Index of event in block from which it was emitted."
  indexInBlock: Int!

  ### SPECIFIC DATA ###

  "Merkle root of the channel payouts payload"
  commitment: Bytes!

  "Storage data object corresponding to the channel payouts payload"
  payload: StorageDataObject!
}
