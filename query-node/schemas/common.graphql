enum Network {
  BABYLON
  ALEXANDRIA
  ROME
  OLYMPIA
}

enum EventType {
  # Memberships
  MembershipBought
  MemberInvited
  MemberProfileUpdated
  MemberAccountsUpdated
  MemberVerificationStatusUpdated
  ReferralCutUpdated
  InvitesTransferred
  MembershipPriceUpdated
  InitialInvitationBalanceUpdated
  LeaderInvitationQuotaUpdated
  InitialInvitationCountUpdated
  StakingAccountAddedEvent
  StakingAccountConfirmed
  StakingAccountRemoved
  # Working Groups
  OpeningAdded
  AppliedOnOpening
  OpeningFilled
  LeaderSet
  WorkerRoleAccountUpdated
  LeaderUnset
  WorkerExited
  TerminatedWorker
  TerminatedLeader
  WorkerStartedLeaving
  StakeSlashed
  StakeDecreased
  StakeIncreased
  ApplicationWithdrawn
  OpeningCanceled
  BudgetSet
  WorkerRewardAccountUpdated
  WorkerRewardAmountUpdated
  StatusTextChanged
  BudgetSpending
  RewardPaid
  NewMissedRewardLevelReached
}

type Block @entity {
  "{network}-{blockNumber}"
  id: ID!

  "Block number (height)"
  number: Int!

  "Block timestamp"
  timestamp: BigInt!

  "Network the block was produced in"
  network: Network!
}

type Event @entity {
  "(network}-{blockNumber}-{indexInBlock}"
  id: ID!

  "Hash of the extrinsic which caused the event to be emitted"
  inExtrinsic: String

  "Block in which the event was emitted."
  inBlock: Block!

  "Index of event in block from which it was emitted."
  indexInBlock: Int!

  "Type of the event"
  type: EventType!
}

# FIXME: https://github.com/Joystream/hydra/issues/359
# interface IEvent @entity {
#   "Generic event data"
#   event: Event!
# }
