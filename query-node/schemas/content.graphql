"Category of media channel"
type ChannelCategory @entity {
  id: ID!

  "The name of the category"
  name: String @fulltext(query: "channelCategoriesByName")

  channels: [Channel!]! @derivedFrom(field: "category")

  createdInBlock: Int!
}

type Language @entity {
  "Runtime entity identifier (EntityId)"
  id: ID!

  "Language identifier ISO 639-1"
  iso: String!

  createdInBlock: Int!
}

type Channel @entity {
  "Runtime entity identifier (EntityId)"
  id: ID!

  "Member owning the channel (if any)"
  ownerMember: Membership

  "Curator group owning the channel (if any)"
  ownerCuratorGroup: CuratorGroup

  category: ChannelCategory

  "Reward account where revenue is sent if set."
  rewardAccount: String

  "The title of the Channel"
  title: String @fulltext(query: "search")

  "The description of a Channel"
  description: String

  "Channel's cover (background) photo asset. Recommended ratio: 16:9."
  coverPhoto: StorageDataObject

  "Channel's avatar photo asset."
  avatarPhoto: StorageDataObject

  ##########################

  "Flag signaling whether a channel is public."
  isPublic: Boolean

  "Flag signaling whether a channel is censored."
  isCensored: Boolean!

  "The primary langauge of the channel's content"
  language: Language

  "List of videos that belong to the channel"
  videos: [Video!]! @derivedFrom(field: "channel")

  "Number of the block the channel was created in"
  createdInBlock: Int!

  "List of channel collaborators (members)"
  collaborators: [Membership!]
}

type CuratorGroup @entity {
  "Runtime identifier"
  id: ID!

  "Curators belonging to this group"
  curatorIds: [Int!]!

  "Is group active or not"
  isActive: Boolean!

  channels: [Channel!]! @derivedFrom(field: "ownerCuratorGroup")
}

type VideoCategory @entity {
  "Runtime identifier"
  id: ID!

  "The name of the category"
  name: String @fulltext(query: "videoCategoriesByName")

  videos: [Video!]! @derivedFrom(field: "category")

  createdInBlock: Int!
}

type Video @entity {
  "Runtime identifier"
  id: ID!

  "Reference to member's channel"
  channel: Channel!

  "Reference to a video category"
  category: VideoCategory

  "The title of the video"
  title: String @fulltext(query: "search")

  "The description of the Video"
  description: String

  "Video duration in seconds"
  duration: Int

  "Video thumbnail asset (recommended ratio: 16:9)"
  thumbnailPhoto: StorageDataObject

  ##########################

  "Video's main langauge"
  language: Language

  "Whether or not Video contains marketing"
  hasMarketing: Boolean

  "If the Video was published on other platform before beeing published on Joystream - the original publication date"
  publishedBeforeJoystream: DateTime

  "Whether the Video is supposed to be publically displayed"
  isPublic: Boolean

  "Flag signaling whether a video is censored."
  isCensored: Boolean!

  "Video nft details"
  nft: OwnedNFT

  "Whether the Video contains explicit material."
  isExplicit: Boolean

  "License under the video is published"
  license: License

  "Video media asset"
  media: StorageDataObject

  ##########################

  "Video file metadata"
  mediaMetadata: VideoMediaMetadata

  createdInBlock: Int!

  "Is video featured or not"
  isFeatured: Boolean!
}

"Represents nft details"
type OwnedNFT @entity {
  "Member owning the nft (if any)"
  ownerMember: Membership

  "Curator group owning the nft (if any)"
  ownerCuratorGroup: CuratorGroup

  "NFT transactional status"
  transactionalStatus: TransactionalStatus!

  "Creator royalty"
  creatorRoyalty: Float
}

"NFT transactional state"
union TransactionalStatus = TransactionalStatusIdle 
  | TransactionalStatusInitiatedOfferToMember
  | TransactionalStatusAuction
  | TransactionalStatusBuyNow

"Represents TransactionalStatus Idle"
variant TransactionalStatusIdle @variant {
  "Variant needs to have at least one not null property. This value is not used."
  dummy: Int!
}

"Represents TransactionalStatus InitiatedOfferToMember"
variant TransactionalStatusInitiatedOfferToMember @variant {
  "Member identifier"
  member: Int!

  "Whether member should pay to accept offer (optional)"
  price: Int
}

"Represents TransactionalStatus Auction"
variant TransactionalStatusAuction @variant {
  "Member identifier"
  auction: Auction!
}

"Represents TransactionalStatus BuyNow"
variant TransactionalStatusBuyNow @variant {
  price: Int!
}

"Represents auction data"
type Auction @entity {
  "Auction starting price"
  starting_price: Int!

  "Whether auction can be completed instantly"
  buy_now_price: Int

  "The type of auction"
  auction_type: AuctionType!

  "Minimal step between auction bids"
  minimal_bid_step: Int!

  "Auction last bid (if exists)"
  last_bid: Bid

  "Whether auction starts at some predefined time in future"
  starts_at: Int

  "Auction participants whitelist"
  whitelist: [Int!]
}

"Represents bid data"
type Bid @entity {
  "Bidder membership"
  bidder: Membership!

  "Bidder account, used to pay for nft"
  bidderAccount: String

  "Amount bidded"
  amount: Int!

  "Bid time"
  time: Int!
}

"Represents various action types"
union AuctionType = English
  | Open


"Represents English auction details"
variant English @variant {
  "English auction duration"
  duration: Int!

  "Auction extension time"
  extensionTime: Int, 
}

"Represents Open auction details"
variant Open @variant {
  "Auction bid lock duration"
  bidLockingTime: Int!
}

type VideoMediaMetadata @entity {
  "Unique identifier"
  id: ID!

  "Encoding of the video media object"
  encoding: VideoMediaEncoding

  "Video media width in pixels"
  pixelWidth: Int

  "Video media height in pixels"
  pixelHeight: Int

  "Video media size in bytes"
  size: BigInt

  video: Video @derivedFrom(field: "mediaMetadata")

  createdInBlock: Int!
}

type VideoMediaEncoding @entity {
  "Encoding of the video media object"
  codecName: String

  "Media container format"
  container: String

  "Content MIME type"
  mimeMediaType: String
}

type License @entity {
  "Unique identifier"
  id: ID!

  "License code defined by Joystream"
  code: Int

  "Attribution (if required by the license)"
  attribution: String

  "Custom license content"
  custom_text: String
}
