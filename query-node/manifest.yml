version: '0.1'
description: Joystream query-node manifest file for olympia
repository: https://github.com/Joystream/joystream
hydraVersion: "3"
dataSource:
  kind: substrate
  chain: joystream
  indexerVersion: '0.1.6'
entities:
  - generated/graphql-server/dist/src/modules/**/*.model.js
typegen:
  metadata:
    source: ${TYPEGEN_WS_URI}
  events:
    - members.MembershipBought
    - members.MemberProfileUpdated
    - members.MemberAccountsUpdated
    - members.MemberVerificationStatusUpdated
    - members.InvitesTransferred
    - members.MemberInvited
    - members.StakingAccountAdded
    - members.StakingAccountConfirmed
    - members.StakingAccountRemoved
    - members.InitialInvitationCountUpdated
    - members.MembershipPriceUpdated
    - members.ReferralCutUpdated
    - members.InitialInvitationBalanceUpdated
    - members.LeaderInvitationQuotaUpdated
    # Use Storage Working Group as a reference group (all groups emit the same events)
    - storageWorkingGroup.OpeningAdded
    - storageWorkingGroup.AppliedOnOpening
    - storageWorkingGroup.OpeningFilled
    - storageWorkingGroup.LeaderSet
    - storageWorkingGroup.WorkerRoleAccountUpdated
    - storageWorkingGroup.LeaderUnset
    - storageWorkingGroup.WorkerStartedLeaving
    - storageWorkingGroup.WorkerExited
    - storageWorkingGroup.TerminatedWorker
    - storageWorkingGroup.TerminatedLeader
    - storageWorkingGroup.StakeSlashed
    - storageWorkingGroup.StakeDecreased
    - storageWorkingGroup.StakeIncreased
    - storageWorkingGroup.ApplicationWithdrawn
    - storageWorkingGroup.OpeningCanceled
    - storageWorkingGroup.BudgetSet
    - storageWorkingGroup.WorkerRewardAccountUpdated
    - storageWorkingGroup.WorkerRewardAmountUpdated
    - storageWorkingGroup.StatusTextChanged
    - storageWorkingGroup.BudgetSpending
    - storageWorkingGroup.RewardPaid
    - storageWorkingGroup.NewMissedRewardLevelReached
    # Proposals
    - proposalsCodex.ProposalCreated
    - proposalsEngine.ProposalCreated
    - proposalsEngine.ProposalStatusUpdated
    - proposalsEngine.ProposalDecisionMade
    - proposalsEngine.ProposalExecuted
    - proposalsEngine.Voted
    - proposalsEngine.ProposalCancelled
    # Proposals discussion
    - proposalsDiscussion.ThreadCreated
    - proposalsDiscussion.PostCreated
    - proposalsDiscussion.PostUpdated
    - proposalsDiscussion.ThreadModeChanged
    - proposalsDiscussion.PostDeleted
  calls:
    - members.updateProfile
    - members.updateAccounts
  outDir: ./mappings/generated/types
  customTypes:
    lib: '@joystream/types/augment/all/types'
    typedefsLoc: '../types/augment/all/defs.json'
mappings:
  hydraCommonVersion: '0.0.3'
  # process only blocks with height >= 1M
  # blockInterval: '[1000000,]'
  # js module that exports the handler functions
  mappingsModule: mappings/lib
  # additinal libraries the processor loads
  # typically it is a module with event and extrinsic types generated by hydra-typegen
  imports:
    - mappings/lib/generated/types
  eventHandlers:
    # Membership module
    - event: members.MembershipBought
      handler: members_MembershipBought(DatabaseManager, SubstrateEvent)
    - event: members.MemberProfileUpdated
      handler: members_MemberProfileUpdated(DatabaseManager, SubstrateEvent)
    - event: members.MemberAccountsUpdated
      handler: members_MemberAccountsUpdated(DatabaseManager, SubstrateEvent)
    - event: members.MemberVerificationStatusUpdated
      handler: members_MemberVerificationStatusUpdated(DatabaseManager, SubstrateEvent)
    - event: members.InvitesTransferred
      handler: members_InvitesTransferred(DatabaseManager, SubstrateEvent)
    - event: members.MemberInvited
      handler: members_MemberInvited(DatabaseManager, SubstrateEvent)
    - event: members.StakingAccountAdded
      handler: members_StakingAccountAdded(DatabaseManager, SubstrateEvent)
    - event: members.StakingAccountConfirmed
      handler: members_StakingAccountConfirmed(DatabaseManager, SubstrateEvent)
    - event: members.StakingAccountRemoved
      handler: members_StakingAccountRemoved(DatabaseManager, SubstrateEvent)
    - event: members.InitialInvitationCountUpdated
      handler: members_InitialInvitationCountUpdated(DatabaseManager, SubstrateEvent)
    - event: members.MembershipPriceUpdated
      handler: members_MembershipPriceUpdated(DatabaseManager, SubstrateEvent)
    - event: members.ReferralCutUpdated
      handler: members_ReferralCutUpdated(DatabaseManager, SubstrateEvent)
    - event: members.InitialInvitationBalanceUpdated
      handler: members_InitialInvitationBalanceUpdated(DatabaseManager, SubstrateEvent)
    - event: members.LeaderInvitationQuotaUpdated
      handler: members_LeaderInvitationQuotaUpdated(DatabaseManager, SubstrateEvent)
    # Storage working group
    - event: storageWorkingGroup.OpeningAdded
      handler: workingGroups_OpeningAdded(DatabaseManager, SubstrateEvent)
    - event: storageWorkingGroup.AppliedOnOpening
      handler: workingGroups_AppliedOnOpening(DatabaseManager, SubstrateEvent)
    - event: storageWorkingGroup.OpeningFilled
      handler: workingGroups_OpeningFilled(DatabaseManager, SubstrateEvent)
    - event: storageWorkingGroup.LeaderSet
      handler: workingGroups_LeaderSet(DatabaseManager, SubstrateEvent)
    - event: storageWorkingGroup.WorkerRoleAccountUpdated
      handler: workingGroups_WorkerRoleAccountUpdated(DatabaseManager, SubstrateEvent)
    - event: storageWorkingGroup.LeaderUnset
      handler: workingGroups_LeaderUnset(DatabaseManager, SubstrateEvent)
    - event: storageWorkingGroup.WorkerExited
      handler: workingGroups_WorkerExited(DatabaseManager, SubstrateEvent)
    - event: storageWorkingGroup.TerminatedWorker
      handler: workingGroups_TerminatedWorker(DatabaseManager, SubstrateEvent)
    - event: storageWorkingGroup.TerminatedLeader
      handler: workingGroups_TerminatedLeader(DatabaseManager, SubstrateEvent)
    - event: storageWorkingGroup.StakeSlashed
      handler: workingGroups_StakeSlashed(DatabaseManager, SubstrateEvent)
    - event: storageWorkingGroup.StakeDecreased
      handler: workingGroups_StakeDecreased(DatabaseManager, SubstrateEvent)
    - event: storageWorkingGroup.StakeIncreased
      handler: workingGroups_StakeIncreased(DatabaseManager, SubstrateEvent)
    - event: storageWorkingGroup.ApplicationWithdrawn
      handler: workingGroups_ApplicationWithdrawn(DatabaseManager, SubstrateEvent)
    - event: storageWorkingGroup.OpeningCanceled
      handler: workingGroups_OpeningCanceled(DatabaseManager, SubstrateEvent)
    - event: storageWorkingGroup.BudgetSet
      handler: workingGroups_BudgetSet(DatabaseManager, SubstrateEvent)
    - event: storageWorkingGroup.WorkerRewardAccountUpdated
      handler: workingGroups_WorkerRewardAccountUpdated(DatabaseManager, SubstrateEvent)
    - event: storageWorkingGroup.WorkerRewardAmountUpdated
      handler: workingGroups_WorkerRewardAmountUpdated(DatabaseManager, SubstrateEvent)
    - event: storageWorkingGroup.StatusTextChanged
      handler: workingGroups_StatusTextChanged(DatabaseManager, SubstrateEvent)
    - event: storageWorkingGroup.BudgetSpending
      handler: workingGroups_BudgetSpending(DatabaseManager, SubstrateEvent)
    - event: storageWorkingGroup.RewardPaid
      handler: workingGroups_RewardPaid(DatabaseManager, SubstrateEvent)
    - event: storageWorkingGroup.NewMissedRewardLevelReached
      handler: workingGroups_NewMissedRewardLevelReached(DatabaseManager, SubstrateEvent)
    - event: storageWorkingGroup.WorkerStartedLeaving
      handler: workingGroups_WorkerStartedLeaving(DatabaseManager, SubstrateEvent)
    # Forum working group
    - event: forumWorkingGroup.OpeningAdded
      handler: workingGroups_OpeningAdded(DatabaseManager, SubstrateEvent)
    - event: forumWorkingGroup.AppliedOnOpening
      handler: workingGroups_AppliedOnOpening(DatabaseManager, SubstrateEvent)
    - event: forumWorkingGroup.OpeningFilled
      handler: workingGroups_OpeningFilled(DatabaseManager, SubstrateEvent)
    - event: forumWorkingGroup.LeaderSet
      handler: workingGroups_LeaderSet(DatabaseManager, SubstrateEvent)
    - event: forumWorkingGroup.WorkerRoleAccountUpdated
      handler: workingGroups_WorkerRoleAccountUpdated(DatabaseManager, SubstrateEvent)
    - event: forumWorkingGroup.LeaderUnset
      handler: workingGroups_LeaderUnset(DatabaseManager, SubstrateEvent)
    - event: forumWorkingGroup.WorkerExited
      handler: workingGroups_WorkerExited(DatabaseManager, SubstrateEvent)
    - event: forumWorkingGroup.TerminatedWorker
      handler: workingGroups_TerminatedWorker(DatabaseManager, SubstrateEvent)
    - event: forumWorkingGroup.TerminatedLeader
      handler: workingGroups_TerminatedLeader(DatabaseManager, SubstrateEvent)
    - event: forumWorkingGroup.StakeSlashed
      handler: workingGroups_StakeSlashed(DatabaseManager, SubstrateEvent)
    - event: forumWorkingGroup.StakeDecreased
      handler: workingGroups_StakeDecreased(DatabaseManager, SubstrateEvent)
    - event: forumWorkingGroup.StakeIncreased
      handler: workingGroups_StakeIncreased(DatabaseManager, SubstrateEvent)
    - event: forumWorkingGroup.ApplicationWithdrawn
      handler: workingGroups_ApplicationWithdrawn(DatabaseManager, SubstrateEvent)
    - event: forumWorkingGroup.OpeningCanceled
      handler: workingGroups_OpeningCanceled(DatabaseManager, SubstrateEvent)
    - event: forumWorkingGroup.BudgetSet
      handler: workingGroups_BudgetSet(DatabaseManager, SubstrateEvent)
    - event: forumWorkingGroup.WorkerRewardAccountUpdated
      handler: workingGroups_WorkerRewardAccountUpdated(DatabaseManager, SubstrateEvent)
    - event: forumWorkingGroup.WorkerRewardAmountUpdated
      handler: workingGroups_WorkerRewardAmountUpdated(DatabaseManager, SubstrateEvent)
    - event: forumWorkingGroup.StatusTextChanged
      handler: workingGroups_StatusTextChanged(DatabaseManager, SubstrateEvent)
    - event: forumWorkingGroup.BudgetSpending
      handler: workingGroups_BudgetSpending(DatabaseManager, SubstrateEvent)
    - event: forumWorkingGroup.RewardPaid
      handler: workingGroups_RewardPaid(DatabaseManager, SubstrateEvent)
    - event: forumWorkingGroup.NewMissedRewardLevelReached
      handler: workingGroups_NewMissedRewardLevelReached(DatabaseManager, SubstrateEvent)
    - event: forumWorkingGroup.WorkerStartedLeaving
      handler: workingGroups_WorkerStartedLeaving(DatabaseManager, SubstrateEvent)
    # Membership working group
    - event: membershipWorkingGroup.OpeningAdded
      handler: workingGroups_OpeningAdded(DatabaseManager, SubstrateEvent)
    - event: membershipWorkingGroup.AppliedOnOpening
      handler: workingGroups_AppliedOnOpening(DatabaseManager, SubstrateEvent)
    - event: membershipWorkingGroup.OpeningFilled
      handler: workingGroups_OpeningFilled(DatabaseManager, SubstrateEvent)
    - event: membershipWorkingGroup.LeaderSet
      handler: workingGroups_LeaderSet(DatabaseManager, SubstrateEvent)
    - event: membershipWorkingGroup.WorkerRoleAccountUpdated
      handler: workingGroups_WorkerRoleAccountUpdated(DatabaseManager, SubstrateEvent)
    - event: membershipWorkingGroup.LeaderUnset
      handler: workingGroups_LeaderUnset(DatabaseManager, SubstrateEvent)
    - event: membershipWorkingGroup.WorkerExited
      handler: workingGroups_WorkerExited(DatabaseManager, SubstrateEvent)
    - event: membershipWorkingGroup.TerminatedWorker
      handler: workingGroups_TerminatedWorker(DatabaseManager, SubstrateEvent)
    - event: membershipWorkingGroup.TerminatedLeader
      handler: workingGroups_TerminatedLeader(DatabaseManager, SubstrateEvent)
    - event: membershipWorkingGroup.StakeSlashed
      handler: workingGroups_StakeSlashed(DatabaseManager, SubstrateEvent)
    - event: membershipWorkingGroup.StakeDecreased
      handler: workingGroups_StakeDecreased(DatabaseManager, SubstrateEvent)
    - event: membershipWorkingGroup.StakeIncreased
      handler: workingGroups_StakeIncreased(DatabaseManager, SubstrateEvent)
    - event: membershipWorkingGroup.ApplicationWithdrawn
      handler: workingGroups_ApplicationWithdrawn(DatabaseManager, SubstrateEvent)
    - event: membershipWorkingGroup.OpeningCanceled
      handler: workingGroups_OpeningCanceled(DatabaseManager, SubstrateEvent)
    - event: membershipWorkingGroup.BudgetSet
      handler: workingGroups_BudgetSet(DatabaseManager, SubstrateEvent)
    - event: membershipWorkingGroup.WorkerRewardAccountUpdated
      handler: workingGroups_WorkerRewardAccountUpdated(DatabaseManager, SubstrateEvent)
    - event: membershipWorkingGroup.WorkerRewardAmountUpdated
      handler: workingGroups_WorkerRewardAmountUpdated(DatabaseManager, SubstrateEvent)
    - event: membershipWorkingGroup.StatusTextChanged
      handler: workingGroups_StatusTextChanged(DatabaseManager, SubstrateEvent)
    - event: membershipWorkingGroup.BudgetSpending
      handler: workingGroups_BudgetSpending(DatabaseManager, SubstrateEvent)
    - event: membershipWorkingGroup.RewardPaid
      handler: workingGroups_RewardPaid(DatabaseManager, SubstrateEvent)
    - event: membershipWorkingGroup.NewMissedRewardLevelReached
      handler: workingGroups_NewMissedRewardLevelReached(DatabaseManager, SubstrateEvent)
    - event: membershipWorkingGroup.WorkerStartedLeaving
      handler: workingGroups_WorkerStartedLeaving(DatabaseManager, SubstrateEvent)
    # Content directory working group
    - event: contentDirectoryWorkingGroup.OpeningAdded
      handler: workingGroups_OpeningAdded(DatabaseManager, SubstrateEvent)
    - event: contentDirectoryWorkingGroup.AppliedOnOpening
      handler: workingGroups_AppliedOnOpening(DatabaseManager, SubstrateEvent)
    - event: contentDirectoryWorkingGroup.OpeningFilled
      handler: workingGroups_OpeningFilled(DatabaseManager, SubstrateEvent)
    - event: contentDirectoryWorkingGroup.LeaderSet
      handler: workingGroups_LeaderSet(DatabaseManager, SubstrateEvent)
    - event: contentDirectoryWorkingGroup.WorkerRoleAccountUpdated
      handler: workingGroups_WorkerRoleAccountUpdated(DatabaseManager, SubstrateEvent)
    - event: contentDirectoryWorkingGroup.LeaderUnset
      handler: workingGroups_LeaderUnset(DatabaseManager, SubstrateEvent)
    - event: contentDirectoryWorkingGroup.WorkerExited
      handler: workingGroups_WorkerExited(DatabaseManager, SubstrateEvent)
    - event: contentDirectoryWorkingGroup.TerminatedWorker
      handler: workingGroups_TerminatedWorker(DatabaseManager, SubstrateEvent)
    - event: contentDirectoryWorkingGroup.TerminatedLeader
      handler: workingGroups_TerminatedLeader(DatabaseManager, SubstrateEvent)
    - event: contentDirectoryWorkingGroup.StakeSlashed
      handler: workingGroups_StakeSlashed(DatabaseManager, SubstrateEvent)
    - event: contentDirectoryWorkingGroup.StakeDecreased
      handler: workingGroups_StakeDecreased(DatabaseManager, SubstrateEvent)
    - event: contentDirectoryWorkingGroup.StakeIncreased
      handler: workingGroups_StakeIncreased(DatabaseManager, SubstrateEvent)
    - event: contentDirectoryWorkingGroup.ApplicationWithdrawn
      handler: workingGroups_ApplicationWithdrawn(DatabaseManager, SubstrateEvent)
    - event: contentDirectoryWorkingGroup.OpeningCanceled
      handler: workingGroups_OpeningCanceled(DatabaseManager, SubstrateEvent)
    - event: contentDirectoryWorkingGroup.BudgetSet
      handler: workingGroups_BudgetSet(DatabaseManager, SubstrateEvent)
    - event: contentDirectoryWorkingGroup.WorkerRewardAccountUpdated
      handler: workingGroups_WorkerRewardAccountUpdated(DatabaseManager, SubstrateEvent)
    - event: contentDirectoryWorkingGroup.WorkerRewardAmountUpdated
      handler: workingGroups_WorkerRewardAmountUpdated(DatabaseManager, SubstrateEvent)
    - event: contentDirectoryWorkingGroup.StatusTextChanged
      handler: workingGroups_StatusTextChanged(DatabaseManager, SubstrateEvent)
    - event: contentDirectoryWorkingGroup.BudgetSpending
      handler: workingGroups_BudgetSpending(DatabaseManager, SubstrateEvent)
    - event: contentDirectoryWorkingGroup.RewardPaid
      handler: workingGroups_RewardPaid(DatabaseManager, SubstrateEvent)
    - event: contentDirectoryWorkingGroup.NewMissedRewardLevelReached
      handler: workingGroups_NewMissedRewardLevelReached(DatabaseManager, SubstrateEvent)
    - event: contentDirectoryWorkingGroup.WorkerStartedLeaving
      handler: workingGroups_WorkerStartedLeaving(DatabaseManager, SubstrateEvent)
    # Proposals
    - event: proposalsCodex.ProposalCreated
      handler: proposalsCodex_ProposalCreated(DatabaseManager, SubstrateEvent)
    - event: proposalsEngine.ProposalCreated
      handler: proposalsEngine_ProposalCreated(DatabaseManager, SubstrateEvent)
    - event: proposalsEngine.ProposalStatusUpdated
      handler: proposalsEngine_ProposalStatusUpdated(DatabaseManager, SubstrateEvent)
    - event: proposalsEngine.ProposalDecisionMade
      handler: proposalsEngine_ProposalDecisionMade(DatabaseManager, SubstrateEvent)
    - event: proposalsEngine.ProposalExecuted
      handler: proposalsEngine_ProposalExecuted(DatabaseManager, SubstrateEvent)
    - event: proposalsEngine.Voted
      handler: proposalsEngine_Voted(DatabaseManager, SubstrateEvent)
    - event: proposalsEngine.ProposalCancelled
      handler: proposalsEngine_ProposalCancelled(DatabaseManager, SubstrateEvent)
    # Proposals discussion
    - event: proposalsDiscussion.ThreadCreated
      handler: proposalsDiscussion_ThreadCreated(DatabaseManager, SubstrateEvent)
    - event: proposalsDiscussion.PostCreated
      handler: proposalsDiscussion_PostCreated(DatabaseManager, SubstrateEvent)
    - event: proposalsDiscussion.PostUpdated
      handler: proposalsDiscussion_PostUpdated(DatabaseManager, SubstrateEvent)
    - event: proposalsDiscussion.ThreadModeChanged
      handler: proposalsDiscussion_ThreadModeChanged(DatabaseManager, SubstrateEvent)
    - event: proposalsDiscussion.PostDeleted
      handler: proposalsDiscussion_PostDeleted(DatabaseManager, SubstrateEvent)
  extrinsicHandlers:
    # infer defaults here
    #- extrinsic: Balances.Transfer
    #- extrinsic: Sudo.batchCall
    #  handler: handleSudoCall(DatabaseManager,SubstrateEvent)
  preBlockHooks:
  postBlockHooks:
