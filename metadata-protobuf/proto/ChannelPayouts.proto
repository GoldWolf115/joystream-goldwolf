syntax = "proto2";

message ChannelPayoutsMetadata {
/**
 Fields in the payload header are encoded in fixed length 32/64 bits instead of [varint encoding](https://developers.google.com/protocol-buffers/docs/encoding#varints) (uint64/32).
 This allows first calculating and then setting the byte offset of each `ChannelPayout` accurately, e.g. 
 `byte_offset` = `size(Header)` + `position_where_record_for_channel_exists_in_Body`
 If varint encoding is used for header fields, then calculating the byte offset of `ChannelPayout` 
 w.r.t the start of the payload would be improbable since the header size won't be known.
**/
  message Header {
    // Length in bytes of entire payload
    required fixed64 payload_length_in_bytes = 1;

    // Length in bytes of payload header
    required fixed64 header_length_in_bytes = 2; 

    // Number of channels
    required fixed32 number_of_channels = 3; 

    message ChannelPayoutByteOffset {
      // Channel id; `c_i`
      required fixed32 channel_id = 1; 
    
      // Byte offset from start of payload where payout record for channel `c_i` exists
      required fixed64 byte_offset = 2; 
    }

    // List of byte offsets for all channels
    repeated ChannelPayoutByteOffset channel_payout_byte_offsets = 4; 
  }

  // Channel payout full body structure, it will not be downloaded by clients in full
  message Body {
    message ChannelPayout {
      required uint32 channel_id = 1; // `c_i`
    
      required float cumulative_reward_earned = 2; // `p_i`
    
      enum Side {
        Left = 0;
        Right = 1;
      }
    
      message ProofElement {
        required bytes hash = 1;
        required Side side = 2;
      }
    
      repeated ProofElement merkle_branch = 3; 
    
      // `d_i`; rationale for for reward or deduction for `c_i`;
      required string payout_rationale = 4; 
    }
    
    // List of channel payouts
    repeated ChannelPayout channel_payouts = 1; 
  }

  required Header header = 1; // Payload header
  required Body body = 2; // Payload body
}